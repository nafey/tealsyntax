%YAML 1.2
---

name: Teal
scope: source.teal
version: 2

file_extensions:
  - tl

variables:
  name: '\b[A-Za-z_][A-Za-z_0-9]*\b'

contexts:
  prototype:
    - include: comments

  comments:
    - match: '--'
      scope: punctuation.definition.comment.teal
      push: comment-line

  comment-line:
    - meta_scope: comment.line.teal
    - match: .*
      pop: 1

  else-pop:
    - match: (?=\S)
      pop: 1

  immediately-pop:
    - match: ''
      pop: 1


  main:
    - include: statements

  statements:
    - include: if-statement
    - include: function-def
    - include: decl2-statement
    - include: for-statement
    - include: do-statement
    - include: while-statement
    - include: repeat-statement
    - include: expression

  expression:
    - include: keywords
    - include: operators
    - include: literals
    - include: function-call
    - include: array
    - include: variable
    - include: table
    - include: paren-expression


  keywords:
    - match: (?:true|false)
      scope: constant.language.boolean.teal
    - match: 'nil'
      scope: constant.language.null.teal
    - match: 'return'
      scope: keyword.control.return.teal
    - match: 'break'
      scope: keyword.control.break.teal
    - match: 'in'
      scope: keyword.control.loop.teal
    - match: 'goto'
      scope: keyword.control.goto.teal
    - match: '\.\.\.'
      scope: constant.language.teal
    - match: ;
      scope: punctuation.terminator.statement.teal


  operators:
    - match: =
      scope: keyword.operator.assignment.teal
    - match: (?://|[-+*/%^])
      scope: keyword.operator.arithmetic.teal
    - match: ~=
      scope: keyword.operator.comparison.teal
    - match: (?:>>|<<|[&|~])
      scope: keyword.operator.bitwise.teal
    - match: (?:[=<>~]=)
      scope: keyword.operator.comparison.teal
    - match: (?:[<>])
      scope: keyword.operator.comparison.teal
    - match: \.\.
      scope: keyword.operator.concatenation.teal
    - match: (?:and|or)
      scope: keyword.operator.logical.teal
    - match: \#
      scope: keyword.operator.length.teal
    - match: not
      scope: keyword.operator.logical.teal

  literals:
    - include: numeric
    - include: string


  numeric:
    - match: \d+(?:(\.))\d*|(\.)\d+
      scope: meta.number.float.decimal.teal constant.numeric.value.teal
      captures:
        1: punctuation.separator.decimal.teal
        2: punctuation.separator.decimal.teal
    - match: \d+
      scope: meta.number.integer.decimal.teal constant.numeric.value.teal

  string:
    - include: double-string
    - include: single-string

  double-string:
    - match: \"
      scope: punctuation.definition.string.begin.teal
      push: double-string-body

  double-string-body:
    - meta_include_prototype: false
    - meta_scope: string.quoted.double.teal meta.string.teal
    - match: \"
      scope: punctuation.defintion.string.end.teal
      pop: 1

  single-string:
    - match: \'
      scope: punctuation.definition.string.begin.teal
      push: single-string-body

  single-string-body:
    - meta_include_prototype: false
    - meta_scope: string.quoted.single.teal meta.string.teal
    - match: \'
      scope: punctuation.defintion.string.end.teal
      pop: 1

  variable:
    - match: '{{name}}'
      scope: variable.other.teal
      push:
        - include: accessor
        - include: else-pop

  decl2-statement:
    - match: 'local'
      scope: keyword.declaration.teal
      push: [decl2-vars-after, decl2-vars]

  decl2-vars:
    - match: '{{name}}'
      scope: meta.binding.name.teal variable.other.readwrite.teal
      pop: 1

  decl2-vars-after:
    - match: ':'
      scope: punctuation.separator.type.teal
      set: [decl2-types-after, decl2-types]
    - match: ','
      scope: punctuation.separator.comma.teal
      set: [decl2-vars-after, decl2-vars]
    - include: else-pop

  decl2-types:
    - match: '{{name}}'
      scope: meta.type.teal support.type.teal
      pop: 1

  decl2-types-after:
    - match: '='
      scope: keyword.operator.assignment.teal
      pop: 1
    - match: ','
      scope: punctuation.separator.comma.teal
      set: [decl2-types-after, decl2-types]
    - include: else-pop

  table:
    - match: '\{'
      scope: punctuation.section.block.begin.teal
      push: table-inside

  table-inside:
    - meta_scope: meta.mapping.teal
    - match: '\}'
      scope: punctuation.section.block.end.teal
      pop: 1
    - match: (\,|\;)
      scope: punctuation.separator.field.teal
    - match: \[
      scope: meta.brackets.teal punctuation.section.brackets.begin.teal
      push:
        - clear_scopes: 1
        - meta_scope: meta.mapping.key.teal meta.brackets.teal
        - match: \]
          scope: meta.brackets.teal punctuation.section.brackets.end.teal
          pop: 1
        - include: expression
    - match: '(?={{name}}\s*\=\s*)'
      push:
        - clear_scopes: 1
        - meta_scope: meta.mapping.key.teal
        - match: '{{name}}'
          scope: string.unquoted.key.teal
          pop: 1
    - match: =
      scope: punctuation.separator.key-value.teal
    - include: expression
    - include: else-pop

  function-call:
    - match: '{{name}}(?=\s*\(\s*)'
      scope: meta.function-call.teal variable.function.teal
      push: function-arguments

  function-arguments:
    - match: \(
      scope: punctuation.section.group.begin.teal
      push:
        - meta_scope: meta.function-call.arguments.teal meta.group.teal
        - include: expression
        - match: ','
          scope: punctuation.separator.comma.teal
        - match: \)(?=\()
          scope: punctuation.section.group.end.teal
          set: function-arguments
        - match: '\)(?=\[)'
          scope: punctuation.section.group.end.teal
          set: array-index
        - match: '\)(?=\.)'
          scope: punctuation.section.group.end.teal
          set: accessor
        - match: \)
          scope: punctuation.section.group.end.teal
          pop: 1
    - include: else-pop

  array:
    - match: '{{name}}(?=\s*\[\s*)'
      scope: variable.other.teal
      push: array-index

  array-index:
    - match: '\['
      scope: punctuation.section.brackets.begin.teal
      push:
        - meta_scope: meta.brackets.teal
        - include: expression
        - match: \](?=\()
          scope: punctuation.section.brackets.end.teal
          set: function-arguments
        - match: '\](?=\[)'
          scope: punctuation.section.brackets.end.teal
          set: array-index
        - match: '\](?=\.)'
          scope: punctuation.section.brackets.end.teal
          set: accessor
        - match: '\]'
          scope: punctuation.section.brackets.end.teal
          pop: 1
    - include: else-pop

  do-statement:
    - match: 'do'
      scope: keyword.control.teal
      push:
        - meta_scope: meta.block.teal
        - match: 'end'
          scope: keyword.control.end.teal
          pop: 1
        - include: statements

  while-statement:
    - match: 'while'
      scope: keyword.control.teal
      push:
        - match: 'do'
          scope: keyword.control.conditional.teal
          pop: 1
          push: while-body
        - include: expression

  while-body:
    - meta_scope: meta.block.teal
    - match: 'end'
      scope: keyword.control.end.teal
      pop: 1
    - include: statements

  repeat-statement:
    - match: 'repeat'
      scope: keyword.control.teal
      push: repeat-body

  repeat-body:
    - meta_scope: meta.block.teal
    - match: 'until'
      scope: keyword.control.end.teal
      pop: 1
    - include: statements
    - include: else-pop

  for-statement:
    - match: 'for'
      scope: keyword.control.loop.teal
      push: for-params

  for-params:
    - match: 'do'
      scope: keyword.control.loop.teal
      pop: 1
      push: for-body
    - match: ','
      scope: punctuation.separator.comma.teal
    - match: 'in'
      scope: keyword.control.loop.teal
    - include: expression

  for-body:
    - meta_scope: meta.block.teal
    - match: 'end'
      scope: keyword.control.end.teal
      pop: 1
    - include: statements


  if-statement:
    - match: 'if'
      scope: keyword.control.conditional.teal
      push: if-expr

  if-expr:
    - match: 'then'
      scope: keyword.control.conditional.teal
      pop: 1
      push: if-body
    - include: expression

  if-body:
    - meta_scope: meta.block.teal
    - match: 'elseif'
      scope: keyword.control.conditional.teal
      set: if-expr
    - match: 'end'
      scope: keyword.control.end.teal
      pop: 1
    - include: statements


  function-def:
    - match: function
      scope: meta.function.teal keyword.declaration.function.teal
      push: function-name

  function-name:
    - match: '{{name}}'
      scope: entity.name.function.teal meta.function.teal meta.block.teal meta.name.function.teal
      pop: 1
      push: function-params

  function-params:
    - match: '\('
      scope: punctuation.section.group.begin.teal
      push:
        - meta_scope: meta.function.teal
        - match: '{{name}}'
          scope: variable.parameter.function.teal
        - match: \,
          scope: punctuation.separator.comma.teal
        - match: \.\.\.
          scope: constant.language.teal
        - match: \)
          scope: punctuation.section.group.end.teal
          pop: 1
          push: function-body
    - include: else-pop

  function-body:
    - meta_scope: meta.function.teal meta.block.teal
    - match: 'end'
      scope: keyword.control.end.teal
      pop: 1
    - include: statements

  accessor:
    - match: '[\.\:]'
      scope: punctuation.accessor.teal
      push:
        - match: '(?={{name}}\s*\(\s*)'
          set: accessor-function-call
        - match: '(?={{name}}\s*\[\s*)'
          set: accessor-array
        - match: '(?={{name}})'
          set: accessor-variable
        - include: else-pop
    - include: else-pop

  accessor-variable:
    - match: '{{name}}'
      scope: meta.property.teal variable.other.teal
    - include: else-pop

  accessor-function-call:
    - match: '{{name}}(?=\s*\(\s*)'
      scope: meta.property.teal meta.function-call.teal variable.function.teal
      push: function-arguments
    - include: else-pop

  accessor-array:
    - match: '{{name}}(?=\s*\[\s*)'
      scope: meta.property.teal variable.other.teal
      push: array-index
    - include: else-pop

  paren-expression:
    - match: \(
      scope: punctuation.section.group.begin.teal
      push: paren-expression-inner
    

  paren-expression-inner:
    - meta_include_prototype: false
    - meta_scope: meta.group.teal
    - include: expression
    - match: \)(?=\()
      scope: punctuation.section.group.end.teal
      set: function-arguments
    - match: '\)(?=\[)'
      scope: punctuation.section.group.end.teal
      set: array-index
    - match: \)
      scope: punctuation.section.group.end.teal
      pop: 1

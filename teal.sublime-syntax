%YAML 1.2
---

name: Teal
scope: source.teal
version: 2

file_extensions:
  - tl

variables:
  name: '\b[A-Za-z_][A-Za-z_0-9]*\b'

contexts:
  prototype:
    - include: comments

  main:
    - include: if-statement
    - include: statements

  statements:
    - include: if-statement
    - include: function-def
    - include: expression

  if-statement:
    - match: 'if'
      scope: keyword.control.conditional.teal
      push: if-then

  if-then:
    - match: 'then'
      scope: keyword.control.conditional.teal
      push: if-body
    - include: expression
    - include: else-pop

  if-body:
    - meta_scope: meta.block.teal
    - match: 'end'
      scope: keyword.control.end.teal
      pop: 2
    - include: statements




  comments:
    - match: '--'
      scope: punctuation.definition.comment.teal
      push: comment-line

  comment-line:
    - meta_scope: comment.line.teal
    - match: .*
      pop: 1

  else-pop:
    - match: (?=\S)
      pop: 1


  keywords:
    - match: \#
      scope: keyword.operator.length.teal
    - match: not
      scope: keyword.operator.logical.teal
    - match: '\.\.\.'
      scope: constant.language.teal

  literals:
    - include: boolean
    - include: nil
    - include: string
    - include: numeric


  atoms:
    - include: keywords
    - include: literals
    - include: function-call
    - include: array
    - include: variable
    - include: accessor
    - include: table
    - include: terminator
    - include: paren-expression


  terminator:
    - match: ;
      scope: punctuation.terminator.statement.teal

  table:
    - match: '\{'
      scope: punctuation.section.block.begin.teal
      push: table-inside

  table-inside:
    - meta_scope: meta.mapping.teal
    - match: (\,|\;)
      scope: punctuation.separator.field.teal
    - match: \[
      scope: meta.brackets.teal punctuation.section.brackets.begin.teal
      push:
        - include: expression
        - match: \]
          scope: meta.brackets.teal punctuation.section.brackets.end.teal
          pop: 1
    - match: =
      scope: punctuation.separator.key-value.teal
    - match: '{{name}}(?=\s*\=\s*)'
      scope: string.unquoted.key.teal
    - include: expression
    - match: '\}'
      scope: punctuation.section.block.end.teal
      pop: 1

  boolean:
    - match: (?:true|false)
      scope: constant.language.boolean.teal

  nil:
    - match: 'nil'
      scope: constant.language.null.teal

  numeric:
    - match: \b\d+\.?\d*\b
      scope: constant.numeric.teal

  string:
    - include: double-string
    - include: single-string

  double-string:
    - match: \"
      scope: punctuation.definition.string.begin.teal
      push: double-string-body

  double-string-body:
    - meta_include_prototype: false
    - meta_scope: string.quoted.double.teal meta.string.teal
    - match: \"
      scope: punctuation.defintion.string.end.teal
      pop: 1

  single-string:
    - match: \'
      scope: punctuation.definition.string.begin.teal
      push: single-string-body

  single-string-body:
    - meta_include_prototype: false
    - meta_scope: string.quoted.single.teal meta.string.teal
    - match: \'
      scope: punctuation.defintion.string.end.teal
      pop: 1

  variable:
    - match: '{{name}}'
      scope: variable.other.teal

  function-def:
    - match: function
      scope: keyword.declaration.function.teal
      set: 
        - function-meta
        - block-contents
        - function-params
        - function-name

  function-meta:
    - meta_scope: meta.function.teal
    - match: ''
      pop: 1

  function-name:
    - match: '{{name}}'
      scope: entity.name.function.teal
      pop: 1

  function-params:
    - match: '\('
      scope: punctuation.section.group.begin.teal
      push:
        - meta_scope: meta.function-call.teal
        - match: '{{name}}'
          scope: variable.parameter.function.teal
        - match: \,
          scope: punctuation.separator.comma.teal
        - match: \.\.\.
          scope: constant.language.teal
        - match: \)
          scope: punctuation.section.group.end.teal
          pop: 1
    - include: else-pop

  block-contents:
    - meta_scope: meta.block.teal
    - include: end
    - include: statements

  end:
    - match: \bend\b
      scope: keyword.control.end.teal
      pop: 1

  function-call:
    - match: '{{name}}(?=\s*\(\s*)'
      scope: meta.function-call.teal variable.function.teal
      push: function-arguments

  function-arguments:
    - match: \(
      scope: punctuation.section.group.begin.teal
      push:
        - meta_scope: meta.function-call.arguments.teal meta.group.teal
        - include: expression
        - match: ','
          scope: punctuation.separator.comma.teal
        - match: \)(?=\()
          scope: punctuation.section.group.end.teal
          set: function-arguments
        - match: '\)(?=\[)'
          scope: punctuation.section.group.end.teal
          set: array-index
        - match: \)
          scope: punctuation.section.group.end.teal
          pop: 1
    - include: else-pop

  array:
    - match: '{{name}}(?=\s*\[\s*)'
      scope: variable.other.teal
      push: array-index

  array-index:
    - match: '\['
      scope: punctuation.section.brackets.begin.teal
      push:
        - meta_scope: meta.brackets.teal
        - include: expression
        - match: \](?=\()
          scope: punctuation.section.brackets.end.teal
          set: function-arguments
        - match: '\](?=\[)'
          scope: punctuation.section.brackets.end.teal
          set: array-index
        - match: '\]'
          scope: punctuation.section.brackets.end.teal
          pop: 1
    - match: '(?=\S)'
      pop: 1

  accessor:
    - match: '[\.\:]'
      scope: punctuation.accessor.teal
      push:
        - match: '(?={{name}}\s*\(\s*)'
          set: accessor-function-call
        - match: '(?={{name}}\s*\[\s*)'
          set: accessor-array
        - match: '(?={{name}})'
          set: accessor-variable
        - include: else-pop

  accessor-variable:
    - match: '{{name}}'
      scope: meta.property.teal variable.other.teal
    - include: else-pop

  accessor-function-call:
    - match: '{{name}}(?=\s*\(\s*)'
      scope: meta.property.teal meta.function-call.teal variable.function.teal
      push: function-arguments
    - include: else-pop

  accessor-array:
    - match: '{{name}}(?=\s*\[\s*)'
      scope: meta.property.teal variable.other.teal
      push: array-index
    - include: else-pop


  expression:
    - match: =
      scope: keyword.operator.assignment.teal
    - match: (?://|[-+*/%^])
      scope: keyword.operator.arithmetic.teal
    - match: (?:>>|<<|[&|~])
      scope: keyword.operator.bitwise.teal
    - match: (?:[=<>~]=)
      scope: keyword.operator.comparison.teal
    - match: (?:[<>])
      scope: keyword.operator.comparison.teal
    - match: \.\.
      scope: keyword.operator.concatenation.teal
    - match: (?:and|or)
      scope: keyword.operator.logical.teal
    - include: atoms

  paren-expression:
    - match: \(
      scope: punctuation.section.group.begin.teal
      push: paren-expression-inner
    

  paren-expression-inner:
    - meta_include_prototype: false
    - meta_scope: meta.group.teal
    - include: expression
    - match: \)(?=\()
      scope: punctuation.section.group.end.teal
      set: function-arguments
    - match: '\)(?=\[)'
      scope: punctuation.section.group.end.teal
      set: array-index
    - match: \)
      scope: punctuation.section.group.end.teal
      pop: 1
